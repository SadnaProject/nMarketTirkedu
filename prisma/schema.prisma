// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id    String  @id @default(cuid())
    name  String?
    email String  @unique
    productReviews ProductReview[]
    cartPurchases CartPurchase[]
    reviews Review[]
}

model ProductReview{
    title      String
    description String
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    rating     Int
    productId  String
    purchaseId String
    storeId    String
    createdAt  DateTime @default(now())
    productPurchase ProductPurchase? 
    @@unique([purchaseId, productId])
    @@id([userId, productId])
}

model Review{
    rating     Int
    createdAt  DateTime @default(now())
    userId     String
    purchaseId String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    storeId    String
    @@id([storeId, purchaseId])
    basketPurchase BasketPurchase? 
}

model ProductPurchase{
    purchaseId  String 
    productId   String 
    quantity    Int
    createdAt  DateTime @default(now())
    price       Float
    review     ProductReview? @relation(fields: [purchaseId, productId], references: [purchaseId, productId])
    storeId     String
    BasketPurchase BasketPurchase @relation(fields: [purchaseId, storeId], references: [purchaseId, storeId])
    @@id([purchaseId, productId])
}

model BasketPurchase{
    purchaseId  String 
    storeId     String
    products   ProductPurchase[]
    review Review? @relation(fields: [purchaseId, storeId], references: [purchaseId, storeId])
    price       Float
    cartPurchase CartPurchase @relation(fields: [purchaseId], references: [purchaseId])
    @@id([purchaseId, storeId])
}

model CartPurchase{
    purchaseId  String @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    baskets     BasketPurchase[]
    totalPrice  Float
}

// model Cart {
//     id            String    @id @default(cuid())
//     userId        String
//     user          User      @relation(fields: [userId], references: [id])
//     items         CartItem[]
// }
