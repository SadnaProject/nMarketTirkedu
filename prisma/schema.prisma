// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model UserAuth {
    id    String  @id //@default(cuid())
    name  String?
    email String  @unique
    password String
    
}

enum ConditionType {
    AtLeast
    AtMost
    Exactly
}

enum TimeConditionType {
    Before
    After
    At
}

enum LiteralConditionType {
    Store
    Category
    Product
    Price
}

enum CompositeConditionType {
    Or
    And
    Xor
    Implies
}

enum CompositeDiscountType {
    Max
    Add
}

enum DiscountOn {
    product
    category
    store
}

model Condition {
    id                   String              @id @default(cuid())
    LiteralCondition     LiteralCondition?   @relation(fields: [LiteralConditionId], references: [id])
    LiteralConditionId   String?
    compositeCondition   CompositeCondition? @relation(fields: [compositeConditionId], references: [id])
    compositeConditionId String?
    dateCondition        DateCondition?      @relation(fields: [dateConditionId], references: [id])
    dateConditionId      String?
    Constraint           Constraint[]
    SimpleDiscount       SimpleDiscount[]
}

model LiteralCondition {
    id            String               @id @default(cuid())
    amount        Int
    conditionType ConditionType
    type          LiteralConditionType
    searchFor     String?
    Condition     Condition[]
}

model DateCondition {
    id                String            @id @default(cuid())
    year              Int?
    month             Int?
    day               Int?
    hour              Int?
    timeConditionType TimeConditionType
    Condition         Condition[]
}

model CompositeCondition {
    id                     String                 @id @default(cuid())
    CompositeConditionType CompositeConditionType
    firstId                String
    secondId               String
    Condition              Condition[]
}

model Discount {
    id          String             @id @default(cuid())
    storeId     String
    store       Store              @relation(fields: [storeId], references: [id])
    compositeId String?
    composite   CompositeDiscount? @relation(fields: [compositeId], references: [id])
    simpleId    String?
    simple      SimpleDiscount?    @relation(fields: [simpleId], references: [id])
}

model CompositeDiscount {
    id       String                @id @default(cuid())
    type     CompositeDiscountType
    leftId   String
    rightId  String
    Discount Discount[]
}

model SimpleDiscount {
    id          String     @id @default(cuid())
    amount      Int
    storeId     String
    conditionId String
    condition   Condition  @relation(fields: [conditionId], references: [id])
    discountOn  DiscountOn
    Discount    Discount[]
}

model Store {
    id          String         @id @default(cuid())
    name        String
    isActive    Boolean
    products    StoreProduct[]
    discounts   Discount[]
    Constraints Constraint[]
}

model StoreProduct {
    id          String @id @default(cuid())
    storeId     String
    store       Store  @relation(fields: [storeId], references: [id])
    name        String
    price       Int
    category    String
    quantity    Int
    description String

    SpecialPrice SpecialPrice[]
}

model SpecialPrice {
    id        String       @id @default(cuid())
    userId    String
    price     Int
    product   StoreProduct @relation(fields: [productId], references: [id])
    productId String
}

model Constraint {
    id          String    @id @default(cuid())
    storeId     String
    store       Store     @relation(fields: [storeId], references: [id])
    conditionId String
    condition   Condition @relation(fields: [conditionId], references: [id])
}

// model Cart {
//     id            String    @id @default(cuid())
//     userId        String
//     user          User      @relation(fields: [userId], references: [id])
//     items         CartItem[]
// }
